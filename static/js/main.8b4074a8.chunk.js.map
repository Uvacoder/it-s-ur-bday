{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Name","name","useParams","line0","useRef","tl0","TimelineLite","delay","useEffect","from","y","ease","Power3","easeOut","ref","el","App","container","line1","line2","line3","tl","TweenMax","to","css","visibility","x","scale","className","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6RASA,SAASA,IAAQ,IACPC,EAASC,cAATD,KACJE,EAAQC,iBAAO,MACfC,EAAM,IAAIC,IAAa,CAAEC,MAAO,IAMpC,OAJAC,qBAAU,WACRH,EAAII,KAAKN,EAAO,IAAK,CAACO,EAAG,IAAMC,KAAMC,IAAOC,aAGvC,wBAAIC,IAAK,SAAAC,GAAE,OAAIZ,EAAQY,IAAvB,SAAkCd,EAAlC,KAyCMe,MAtCf,WACE,IAAIC,EAAYb,iBAAO,MACnBc,EAAQd,iBAAO,MACfe,EAAQf,iBAAO,MACfgB,EAAQhB,iBAAO,MACfiB,EAAK,IAAIf,IAAa,CAAEC,MAAO,IAUnC,OARAC,qBAAU,WACRc,IAASC,GAAGN,EAAW,EAAG,CAACO,IAAK,CAACC,WAAY,aAC7CJ,EAAGZ,KAAKS,EAAO,IAAK,CAACQ,GAAI,IAAMf,KAAMC,IAAOC,UACzCJ,KAAKU,EAAO,IAAK,CAACO,EAAG,IAAMf,KAAMC,IAAOC,UACxCJ,KAAKW,EAAO,IAAK,CAACV,GAAI,IAAMiB,MAAO,EAAGhB,KAAMC,IAAOC,aAKtD,yBAAKe,UAAU,WAAWd,IAAK,SAAAC,GAAE,OAAIE,EAAYF,IAC/C,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOc,KAAK,UACV,kBAAC7B,EAAD,MACA,wBAAIc,IAAK,SAAAC,GAAE,OAAIG,EAAQH,IAAvB,QACA,wBAAID,IAAK,SAAAC,GAAE,OAAII,EAAQJ,IAAvB,QACA,wBAAID,IAAK,SAAAC,GAAE,OAAIK,EAAQL,IAAvB,aACA,yBAAKa,UAAU,WACf,yBAAKA,UAAU,WAEjB,kBAAC,IAAD,CAAOC,KAAK,KACV,wBAAIf,IAAK,SAAAC,GAAE,OAAIG,EAAQH,IAAvB,QACA,wBAAID,IAAK,SAAAC,GAAE,OAAII,EAAQJ,IAAvB,QACA,wBAAID,IAAK,SAAAC,GAAE,OAAIK,EAAQL,IAAvB,aACA,yBAAKa,UAAU,WACf,yBAAKA,UAAU,cCxCLE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCNNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8b4074a8.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport { \n  Switch, \n  Route,\n  useParams \n} from \"react-router-dom\";\nimport './App.css';\nimport { TweenMax, TimelineLite, Power3 } from 'gsap';\n\nfunction Name() {\n  const { name } = useParams();\n  let line0 = useRef(null);\n  let tl0 = new TimelineLite({ delay: 1 })\n\n  useEffect(() => {\n    tl0.from(line0, 1.3, {y: 2000, ease: Power3.easeOut})\n  })\n\n  return <h1 ref={el => line0 = el}>Hello {name},</h1>\n}\n\nfunction App() {\n  let container = useRef(null);\n  let line1 = useRef(null);\n  let line2 = useRef(null);\n  let line3 = useRef(null);\n  let tl = new TimelineLite({ delay: 2 })\n\n  useEffect(() => {\n    TweenMax.to(container, 0, {css: {visibility: \"visible\"}})\n    tl.from(line1, 1.3, {x: -2000, ease: Power3.easeOut})\n      .from(line2, 1.3, {x: 2000, ease: Power3.easeOut})\n      .from(line3, 1.8, {y: -2000, scale: 6, ease: Power3.easeOut});\n  })\n  \n\n  return (\n    <div className=\"App pyro\" ref={el => container = el}>\n      <Switch>\n        <Route path=\"/:name\">\n          <Name />\n          <h1 ref={el => line1 = el}>It's</h1>\n          <h1 ref={el => line2 = el}>your</h1>\n          <h1 ref={el => line3 = el}>birthday!</h1>\n          <div className=\"before\"></div>\n          <div className=\"after\"></div>\n        </Route> \n        <Route path=\"/\">\n          <h1 ref={el => line1 = el}>It's</h1>\n          <h1 ref={el => line2 = el}>your</h1>\n          <h1 ref={el => line3 = el}>birthday!</h1>\n          <div className=\"before\"></div>\n          <div className=\"after\"></div>\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}